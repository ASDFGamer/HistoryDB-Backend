# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.generic_default_language import GenericDefaultLanguage  # noqa: F401,E501
from swagger_server.models.source import Source  # noqa: F401,E501
from swagger_server.models.time_frame import TimeFrame  # noqa: F401,E501
from swagger_server import util


class Event(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, eventtype: int=None, name: GenericDefaultLanguage=None, time: TimeFrame=None, source: Source=None):  # noqa: E501
        """Event - a model defined in Swagger

        :param eventtype: The eventtype of this Event.  # noqa: E501
        :type eventtype: int
        :param name: The name of this Event.  # noqa: E501
        :type name: GenericDefaultLanguage
        :param time: The time of this Event.  # noqa: E501
        :type time: TimeFrame
        :param source: The source of this Event.  # noqa: E501
        :type source: Source
        """
        self.swagger_types = {
            'eventtype': int,
            'name': GenericDefaultLanguage,
            'time': TimeFrame,
            'source': Source
        }

        self.attribute_map = {
            'eventtype': 'eventtype',
            'name': 'name',
            'time': 'time',
            'source': 'source'
        }
        self._eventtype = eventtype
        self._name = name
        self._time = time
        self._source = source

    @classmethod
    def from_dict(cls, dikt) -> 'Event':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Event of this Event.  # noqa: E501
        :rtype: Event
        """
        return util.deserialize_model(dikt, cls)

    @property
    def eventtype(self) -> int:
        """Gets the eventtype of this Event.


        :return: The eventtype of this Event.
        :rtype: int
        """
        return self._eventtype

    @eventtype.setter
    def eventtype(self, eventtype: int):
        """Sets the eventtype of this Event.


        :param eventtype: The eventtype of this Event.
        :type eventtype: int
        """

        self._eventtype = eventtype

    @property
    def name(self) -> GenericDefaultLanguage:
        """Gets the name of this Event.


        :return: The name of this Event.
        :rtype: GenericDefaultLanguage
        """
        return self._name

    @name.setter
    def name(self, name: GenericDefaultLanguage):
        """Sets the name of this Event.


        :param name: The name of this Event.
        :type name: GenericDefaultLanguage
        """

        self._name = name

    @property
    def time(self) -> TimeFrame:
        """Gets the time of this Event.


        :return: The time of this Event.
        :rtype: TimeFrame
        """
        return self._time

    @time.setter
    def time(self, time: TimeFrame):
        """Sets the time of this Event.


        :param time: The time of this Event.
        :type time: TimeFrame
        """

        self._time = time

    @property
    def source(self) -> Source:
        """Gets the source of this Event.


        :return: The source of this Event.
        :rtype: Source
        """
        return self._source

    @source.setter
    def source(self, source: Source):
        """Sets the source of this Event.


        :param source: The source of this Event.
        :type source: Source
        """

        self._source = source
