# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.generic_default_language import GenericDefaultLanguage  # noqa: F401,E501
from swagger_server.models.geo_point import GeoPoint  # noqa: F401,E501
from swagger_server.models.source import Source  # noqa: F401,E501
from swagger_server.models.time_frame import TimeFrame  # noqa: F401,E501
from swagger_server import util


class Settlement(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: GenericDefaultLanguage=None, existing: TimeFrame=None, location: GeoPoint=None, source: Source=None):  # noqa: E501
        """Settlement - a model defined in Swagger

        :param name: The name of this Settlement.  # noqa: E501
        :type name: GenericDefaultLanguage
        :param existing: The existing of this Settlement.  # noqa: E501
        :type existing: TimeFrame
        :param location: The location of this Settlement.  # noqa: E501
        :type location: GeoPoint
        :param source: The source of this Settlement.  # noqa: E501
        :type source: Source
        """
        self.swagger_types = {
            'name': GenericDefaultLanguage,
            'existing': TimeFrame,
            'location': GeoPoint,
            'source': Source
        }

        self.attribute_map = {
            'name': 'name',
            'existing': 'existing',
            'location': 'location',
            'source': 'source'
        }
        self._name = name
        self._existing = existing
        self._location = location
        self._source = source

    @classmethod
    def from_dict(cls, dikt) -> 'Settlement':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Settlement of this Settlement.  # noqa: E501
        :rtype: Settlement
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> GenericDefaultLanguage:
        """Gets the name of this Settlement.


        :return: The name of this Settlement.
        :rtype: GenericDefaultLanguage
        """
        return self._name

    @name.setter
    def name(self, name: GenericDefaultLanguage):
        """Sets the name of this Settlement.


        :param name: The name of this Settlement.
        :type name: GenericDefaultLanguage
        """

        self._name = name

    @property
    def existing(self) -> TimeFrame:
        """Gets the existing of this Settlement.


        :return: The existing of this Settlement.
        :rtype: TimeFrame
        """
        return self._existing

    @existing.setter
    def existing(self, existing: TimeFrame):
        """Sets the existing of this Settlement.


        :param existing: The existing of this Settlement.
        :type existing: TimeFrame
        """

        self._existing = existing

    @property
    def location(self) -> GeoPoint:
        """Gets the location of this Settlement.


        :return: The location of this Settlement.
        :rtype: GeoPoint
        """
        return self._location

    @location.setter
    def location(self, location: GeoPoint):
        """Sets the location of this Settlement.


        :param location: The location of this Settlement.
        :type location: GeoPoint
        """

        self._location = location

    @property
    def source(self) -> Source:
        """Gets the source of this Settlement.


        :return: The source of this Settlement.
        :rtype: Source
        """
        return self._source

    @source.setter
    def source(self, source: Source):
        """Sets the source of this Settlement.


        :param source: The source of this Settlement.
        :type source: Source
        """

        self._source = source
